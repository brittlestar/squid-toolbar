unit TestAppliList;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Windows, ShlObj, lnk, DefaultBrowser, Registry, Classes, SysUtils, ActiveX,
  AppliList, IniFiles;

type
  // Test methods for class TAppliList
  TestTAppliList = class(TTestCase)
  strict private
    FAppliList: TAppliList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSaveAppliList;
    procedure TestReadAppliList;
    procedure TestShiftUp;
    procedure TestShiftDown;
    procedure TestAdd;
    procedure TestRemove;
    procedure TestRemoveDeadLinks;
  end;

implementation

procedure TestTAppliList.SetUp;
var
  IniFileName_L: string;
begin
  IniFileName_L := ParamStr(0);
  IniFileName_L := GetShellFoldername(CSIDL_APPDATA) + '\' + ExtractFileName(ChangeFileExt('Squid', '.ini'));
  DeleteFile(IniFileName_L);
  FAppliList := TAppliList.Create;
  FAppliList.Add(0, 'c:\windows\notepad.exe', 'test.txt', 'c:\windows\');
  FAppliList.Add(1, 'c:\windows\write.exe', 'test.txt', 'c:\windows\');
  FAppliList.Add(2, 'c:\windows\doesnotexists.exe', 'test.txt', 'c:\windows\');
end;

procedure TestTAppliList.TearDown;
begin
  FAppliList.Free;
  FAppliList := nil;
end;

procedure TestTAppliList.TestReadAppliList;
begin
  FAppliList.ReadAppliList;
  CheckTrue(FAppliList.Count = 6);
end;

procedure TestTAppliList.TestSaveAppliList;
begin
  FAppliList.SaveAppliList;
end;

procedure TestTAppliList.TestShiftUp;
var
  Application_L: TApplication;
begin
  FAppliList.ShiftUp;
  Application_L := FAppliList[0];
  CheckTrue(Application_L.ExeName_M = 'c:\windows\write.exe');
end;

procedure TestTAppliList.TestShiftDown;
var
  Application_L: TApplication;
begin
  FAppliList.ShiftDown;
  Application_L := FAppliList[0];
  CheckTrue(Application_L.ExeName_M = 'c:\windows\doesnotexists.exe');
end;

procedure TestTAppliList.TestAdd;
var
  LinkCount_L: integer;
begin
  LinkCount_L := FAppliList.Count;
  FAppliList.Add(0, 'c:\windows\winhlp32.exe');
  CheckTrue(FAppliList.Count = (LinkCount_L + 1));
end;

procedure TestTAppliList.TestRemove;
var
  LinkCount_L: integer;
begin
  LinkCount_L := FAppliList.Count;
  FAppliList.Remove(0);
  CheckTrue(FAppliList.Count = (LinkCount_L - 1));
end;

procedure TestTAppliList.TestRemoveDeadLinks;
var
  LinkCount_L: integer;
begin
  LinkCount_L := FAppliList.Count;
  FAppliList.RemoveDeadLinks;
  CheckTrue(FAppliList.Count = (LinkCount_L - 1));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAppliList.Suite);
end.

